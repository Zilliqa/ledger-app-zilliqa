#!/usr/bin/env python3

from ledgerblue.comm import getDongle
from ledgerblue.commException import CommException
import argparse
import struct

# Generated from Zilliqa-Js library:
# encodeTransactionProto({
#     "version": 65537,
#     "nonce": 13,
#     "toAddr": "8AD0357EBB5515F694DE597EDA6F3F6BDBAD0FD9",
#     "amount": new BN(100),
#     "pubKey": "0205273e54f262f8717a687250591dcfb5755b8ce4e3bd340c7abefd0de1276574",
# "gasPrice": new BN(1000000000),
#                 "gasLimit": Long.fromNumber(1),
# })
EncodedTxn = "0881800410c3031a14000000000000000000000000000000000000000022230a2103d3c94c377f0fb329dc5c857f7dbd7f694eecfca377db079b68ef7285905baa0b2a120a100000000000000000000000000000000032120a100000000000000000000000003b9aca00380042c80b7363696c6c615f76657273696f6e20300a0a282a2048656c6c6f576f726c6420636f6e7472616374202a290a0a696d706f7274204c6973745574696c730a0a282a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a202020202020202020202020202020202020290a282a2020202020202020202020202020204173736f636961746564206c696272617279202020202020202020202020202020202a290a282a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a290a6c6962726172792048656c6c6f576f726c640a0a6c6574206f6e655f6d7367202020203d0a202066756e20286d7367203a204d65737361676529203d3e0a20206c6574206e696c5f6d7367203d204e696c207b4d6573736167657d20696e0a2020436f6e73207b4d6573736167657d206d7367206e696c5f6d73670a0a6c6574206e6f745f6f776e65725f636f6465203d20496e74333220310a6c6574207365745f68656c6c6f5f636f6465203d2020202020496e74333220320a0a282a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a290a282a2020202020202020202020202054686520636f6e747261637420646566696e6974696f6e202020202020202020202020202a2020202020202020202020202020202020202020202020202020202020202020290a282a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a290a0a636f6e74726163742048656c6c6f576f726c640a286f776e65723a2042795374723230290a0a6669656c642077656c636f6d655f6d7367203a20537472696e67203d2022220a0a7472616e736974696f6e202073657448656c6c6f20286d7367203a20537472696e67290a202069735f6f776e6572203d206275696c74696e206571206f776e6572205f73656e6465723b0a20206d617463682069735f6f776e657220776974680a20207c2046616c7365203d3e0a2020202065203d207b5f6576656e746e616d65203a202273657448656c6c6f2829223b20636f6465203a202020206e6f745f6f776e65725f636f64657d3b0a202020206576656e7420650a20207c2054727565203d3e0a2020202077656c636f6d655f6d7367203a3d206d73673b0a2020202065203d207b5f6576656e746e616d65203a202273657448656c6c6f2829223b20636f6465203a207365745f68656c6c6f5f636f64657d3b0a202020206576656e7420650a2020202020656e640a656e640a0a0a7472616e736974696f6e2067657448656c6c6f2028290a2020202072203c2d2077656c636f6d655f6d73673b0a2020202065203d207b5f6576656e746e616d653a202267657448656c6c6f2829223b206d73673a20727d3b0a202020206576656e7420650a656e640a0a7472616e736974696f6e2020202020202020202020206d756c7469706c654d73677328290a20206d736731203d207b5f746167203a2022223b205f726563697069656e74203a205f73656e6465723b205f616d6f756e74203a2055696e7431323820307d3b0a20206d736732203d207b5f746167203a2022223b205f726563697069656e74203a205f73656e6465723b205f616d6f756e74203a2055696e7431323820202020307d3b0a20206d73677331203d206f6e655f6d7367206d7367313b0a20206d73677332203d20436f6e73207b4d6573736167657d206d736732206d736773313b0a202073656e64206d736773320a656e640a0a7472616e736974696f6e20636f6e74724164647228290a20206d736731203d207b5f6576656e746e616d65203a20202020202020202020202020202022436f6e747261637441646472657373223b2061646472203a205f746869735f61646472657373207d3b0a20206576656e74206d7367310a656e640a4aa3015b7b22766e616d65223a225f7363696c6c615f76657273696f6e222c2274797065223a2255696e743332222c2276616c7565223a2230227d2c7b22766e616d65223a226f776e6572222c2274797065223a2242795374723230222c2276616c7565223a20202020202020202020202020202020202022307839626665633731356136626436353866636236326230663863633962666132616465373134333461227d5d"

def apduPrefix():
    # https://en.wikipedia.org/wiki/Smart_card_application_protocol_data_unit
    CLA = bytes.fromhex("E0")
    INS = b"\x04"
    P1 = b"\x00"
    P2 = b"\x00"

    return CLA + INS + P1 + P2


def main(args):
    STREAM_LEN = 16 # Stream in batches of STREAM_LEN bytes each.
    indexBytes = struct.pack("<I", args.index)
    txnBytes = bytearray.fromhex(EncodedTxn)

    print("txnBytes: " + txnBytes.hex())
    if len(txnBytes) > STREAM_LEN:
        txn1Bytes = txnBytes[0:STREAM_LEN]
        txnBytes = txnBytes[STREAM_LEN:]
    else:
        txn1Bytes = txnBytes
        txnBytes = bytearray(0)

    txn1SizeBytes = struct.pack("<I", len(txn1Bytes))
    hostBytesLeftBytes = struct.pack("<I", len(txnBytes))

    prefix = apduPrefix()
    # See signTxn.c:handleSignTxn() for sequence details of payload.
    # 1. 4 bytes for indexBytes.
    # 2. 4 bytes for hostBytesLeftBytes.
    # 3. 4 bytes for txn1SizeBytes (number of bytes being sent now).
    # 4. txn1Bytes of actual data.
    payload = indexBytes + hostBytesLeftBytes + txn1SizeBytes + txn1Bytes
    L_c = bytes([len(payload)])
    apdu = prefix + L_c + payload

    dongle = getDongle(True)
    result = dongle.exchange(apdu)

    # Keep streaming data into the device till we run out of it.
    # See signTxn.c:istream_callback() for how this is used.
    # Each time the bytes sent consists of:
    #  1. 4-bytes of hostBytesLeftBytes.
    #  2. 4-bytes of txnNSizeBytes (number of bytes being sent now).
    #  3. txnNBytes of actual data.
    while len(txnBytes) > 0:
        if len(txnBytes) > STREAM_LEN:
            txnNBytes = txnBytes[0:STREAM_LEN]
            txnBytes = txnBytes[STREAM_LEN:]
        else:
            txnNBytes = txnBytes
            txnBytes = bytearray(0)
        hostBytesLeftBytes = struct.pack("<I", len(txnBytes))
        txnNSizeBytes = struct.pack("<I", len(txnNBytes))
        payload = hostBytesLeftBytes + txnNSizeBytes + txnNBytes
        L_c = bytes([len(payload)])
        apdu = prefix + L_c + payload
        result = dongle.exchange(apdu)

    print("Response: " + result.hex())
    print("Length: " + str(len(result)))

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    #parser.add_argument('--txnJson', '-j', type=str, required=False)
    parser.add_argument('--index', '-i', type=int, required=True)
    args = parser.parse_args()
    main(args)
